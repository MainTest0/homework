package Finish;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

public class Ex01 extends JFrame{
	
	private JLabel backgroundMap;
	private int mapHeight;
	private int mapWidth;
	private double squareHeight;
	private double squareWidth;
	private final int W = 1;
	private final int F = 2;
	private int[][] back = {
			{W,	W,	W,	W,	W,	W,	W,	W,	W,	W,	W,	W,	W,	W,	W,	W},	
			{W,	F,		F,		F,		F,		F,		F,		W,	W,	F,		F,		F,		F,		F,		F,		W},	
			{W,	F,		F	,	F,		F,		F,		F,		W,	W,	F,		F,		F,		F,		F,		F,		W},	
			{W,	F,		F,		F,		F,		F,		F,		W,	W,	F,		F,		F,		F,		F,		F,		W},	
			{W,	F,		F,		F,		F,		F,		F,		W,	W,	F,		F,		F,		F,		F,		F,		W},	
			{W,	F,		F,		F,		F,		F,		F,		F,		F,		F,		F,		F,		F,		F,		F,		W},	
			{W,	F,		F,		F,		F,		F,		F,		F,		F,		F,		F,		F,		F,		F,		F,		W},	
			{W,	F,		F,		F,		F,		F,		F,		F,		F,		F,		F,		F,		F,		F,		F,		W},	
			{W,	F,		F,		F,		F,		F,		F,		F,		F,		F,		F,		F,		F,		F,		F,		W},	
			{W,	F,		F,		F,		F,		F,		F,		F,		F,		F,		F,		F,		F,		F,		F,		W},	
			{W,	F,		F,		F,		F,		F,		F,		W,	W	,	F,		F,		F,		F,		F,		F,		W},	
			{W,	F,		F,		F,		F,		F,		F,		W,	W,	F,		F,		F,		F,		F,		F,		W},	
			{W,	F,		F,		F,		F,		F,		F,		W,	W,	F,		F,		F,		F,		F,		F,		W},	
			{W,	F,		F,		F,		F,		F,		F,		W,	W,	F,		F,		F,		F,		F,		F,		W},	
			{W,	W,	W,	W,	W,	W,	W,	W,	W,	W,	W,	W,	W,	W,	W,	W}
	};
	// 팩맨 요소들
	private Player player;
	private Enemy enemy;
	private Ex01 mContext = this;
	private Score score = new Score();
	private ArrayList<JLabel> marbleList = new ArrayList<>();
	private ArrayList<Enemy> enemyList = new ArrayList<>();
	// 남은 목숨 이미지로 보여줄 수 있는 이미지
	private JLabel life1;
	private JLabel life2;
	private JLabel life3;
	// 키 동시입력 막는 용도
	private boolean keyPressed;
	// 게임 끝 판단 용도
	private boolean gameOver;
	// 씨앗 좌표
	private int seedX;
	private int seedY;
	// 인게임 bgm
	private InGameBGM gameBGM;
	
	public Ex01() {
		initData();
		setInitLayout();
		addEventListener();
		new Thread(new BackgroundPlayerService(player, this)).start();
		for (int i = 0; i < enemyList.size(); i++) {
			new Thread(new BackgroundEnemyService(enemyList.get(i), this)).start();
		}
		gameBGM = new InGameBGM();
	}
	public void paint(Graphics g) {
		super.paint(g);
		Font font1 = new Font("맑은 고딕", Font.BOLD, 20);
		g.setFont(font1);
		g.setColor(Color.white);
		g.drawString("Score", 600, 780);
		g.drawString(score.getScore() + "점", 680, 780);
		// warning 화면 표시
		if (enemyList.get(0).isFastMode()) {
			super.paint(g);
			Font font = new Font("consolas", Font.BOLD, 50);
			g.setFont(font);
			g.setColor(Color.red);
			g.drawString("Warning", 300, 430);
		}
	}
	
	public ArrayList<JLabel> getMarbleList() {
		return marbleList;
	}

	public void setMarbleList(ArrayList<JLabel> marbleList) {
		this.marbleList = marbleList;
	}

	public Marble getMarble(int i) {
		return (Marble) marbleList.get(i);
	}

	public InGameBGM getGameBGM() {
		return gameBGM;
	}

	public void setGameBGM(InGameBGM gameBGM) {
		this.gameBGM = gameBGM;
	}

	public Score getScore() {
		return score;
	}

	public int getScoreN() {
		return score.getScore();
	}

	public void setScore(Score score) {
		this.score = score;
	}

	public JLabel[] getSeed() {
		return seed;
	}

	public JLabel getSeed(int i) {
		return seed[i];
	}

	public void setSeed(JLabel[] seed) {
		this.seed = seed;
	}

	public JLabel getLife1() {
		return life1;
	}

	public void setLife1(JLabel life1) {
		this.life1 = life1;
	}

	public JLabel getLife2() {
		return life2;
	}

	public void setLife2(JLabel life2) {
		this.life2 = life2;
	}

	public JLabel getLife3() {
		return life3;
	}

	public void setLife3(JLabel life3) {
		this.life3 = life3;
	}

	public Player getPlayer() {
		return player;
	}

	public boolean getGameOver() {
		return gameOver;
	}

	public void setGameOver(boolean gameOver) {
		this.gameOver = gameOver;
	}
	
	private void initData() {
		setTitle("팩맨");
		setSize(800, 800);
		backgroundMap = new JLabel(new ImageIcon("images/backgroundMap4.png"));
		setContentPane(backgroundMap);
		player = new Player(mContext);
		for (int i = 0; i < seed.length; i++) {
			seed[i] = new JLabel(new ImageIcon("images/seed.png"));
			seed[i].setSize(50, 50);
		}
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		makeEnemies();
		makeMarble();
		life1 = new JLabel(new ImageIcon("images/life.png"));
		life2 = new JLabel(new ImageIcon("images/life.png"));
		life3 = new JLabel(new ImageIcon("images/life.png"));
		life1.setSize(50, 50);
		life2.setSize(50, 50);
		life3.setSize(50, 50);
		keyPressed = false;
		seedX = 55;
		seedY = 45;
		mapHeight = 70;
		mapWidth = 270;
		backgroundMap = new JLabel();
	}
	
	private void setInitLayout() {
		add(backgroundMap);
		setResizable(false);
		setVisible(true);
	}
	
	class BackgroundMap extends JPanel {
		private Image wall = new ImageIcon("images/wall.png").getImage();
		private Image food = new ImageIcon("images/seed.png").getImage();
		private Image backMap = new ImageIcon("images/backgroundMap4.png").getImage();
		@Override
		public void paint(Graphics g) {
			super.paint(g);
			g.drawImage(backMap, 0, 0, null);
			for(int i = 0; i < back.length; i++) {
				for(int j = 0; j < back[i].length; j++) {
					if(back[i][j] == W) {
						g.drawImage(wall, mapHeight, mapWidth, null);
					} else if(back[i][j] == F) {
//						g.drawImage(food, mapHeight*i, mapWidth*j, null);
//						System.out.println(50 * j + "zz" + 52 * i);
					}
				}
			}
		}
	}
	
	public static void main(String[] args) {
		new Ex01();
	}

}
