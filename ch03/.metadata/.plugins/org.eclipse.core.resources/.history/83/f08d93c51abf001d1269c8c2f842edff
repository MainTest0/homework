package test;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

// 실제 DB에 접근해서 기능을 처리해주는 녀석
public class EmployeeDAO implements IEmployeeDAO {

	private DBHelper dbHelper;
	private Connection conn;

	// private Statement stmt; 오늘은 안쓰고
	// PreparedStatement - 기능도 확장됬고 좀 더 빠르게 성능을 높일 수 있음
	// 단, 첫번째 호출이면 Statement랑 PreparedStatement은 똑같음
	// 한번 쓴 녀석은 버퍼 저장공간에 대기하는데 한번 더 쓰게되면 PreparedStatement 얘가 더 빠름
	// 기능도 편하게 쓸 수 있게끔 만들 수 있다.
	private PreparedStatement pstmt;

	private ResultSet rs;

	public EmployeeDAO() {
		// 체인처럼 연결됬다고해서 메서드 체인연결 방식
		// dbHelper.getConnection().createStatement().executeQuery()

		// dbHelper(인스턴스메서드)

		// DBHelper 객체를 가지고오는 동작
		dbHelper = DBHelper.getInstance();
		// DBHelper에서 커넥션 객체를 가지고오는 동작
		conn = dbHelper.getConnection();

	}// end of EmployeeDAO 생성자

	@Override
	public ArrayList<EmployeeDTO> showTitleEmpInfo(String title) {
		ArrayList<EmployeeDTO> list = new ArrayList<>();

		// 쿼리문 만들어서 데이터베이스 던지기
		// 포맷안쓰고
		String sql = " SELECT e.emp_no, first_name,last_name,title " + "	FROM employees AS e "
				+ "	INNER JOIN titles AS t " + "	ON e.emp_no = t.emp_no " + "	WHERE t.title = ? "
				+ "	ORDER BY e.emp_no DESC " + "	LIMIT 10 ";
		// Staff는 고정값, title이랑 ?로 매핑 가능
		// 여기까지 쿼리문 만들어지는데 ?랑 매핑할 수 있다.
		// PreparedStatement 시작 번호는 1번부터 시작한다.
		// 문자열은 ' ' 생략 가능 그냥 ? 기반으로 사용 가능

		try {
			pstmt = conn.prepareStatement(sql);
			// 데이터 넣는거라 set 첫번째 물음표에 1
			// 1, title하면 매개변수에 들어오는 값이 물음표 대신 들어간다.
			pstmt.setString(1, title);
			// pstmt.executeQuery(); resultset 던져줌
			rs = pstmt.executeQuery();
			while (rs.next()) {
				EmployeeDTO dto = new EmployeeDTO();
				dto.setEmpNo(rs.getString("emp_no"));
				dto.setFirstName(rs.getString("first_name"));
				dto.setLastName(rs.getString("last_name"));
				dto.setTitle(rs.getString("title"));
				list.add(dto);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rs.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return list;
	}

	@Override
	public ArrayList<EmployeeDTO> showTitleEmpInfo(String firstName, String lastName) {
		ArrayList<EmployeeDTO> list = new ArrayList<>();

		String sql = " SELECT first_name, last_name, COUNT(salary) "
				+ " FROM employees AS e "
				+ " LEFT JOIN salaries AS s "
				+ " ON e.emp_no = s.emp_no "
				+ " GROUP BY e.emp_no "
				+ " HAVING first_name = ? "
				+ "	AND last_name = ? ";
		
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, firstName);
			pstmt.setString(2, lastName);
			rs = pstmt.executeQuery();
			while(rs.next()) {
				EmployeeDTO dto = new EmployeeDTO();
				dto.setFirstName(rs.getString("first_name"));
				dto.setLastName( rs.getString("last_name"));
				dto.setCount(rs.getInt("COUNT(salary)"));
				list.add(dto);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			try {
				pstmt.close();
				rs.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		
		return list;
	}

	@Override
	public void insert(EmployeeDTO dto) {

		String sqlFormat = " INSERT INTO employees(emp_no, birth_date, first_name "
				+ "	, last_name, gender, hire_date) "
				+ " VALUES "
				+ "	(%s, %s, %s,%s,%s, %s) ";
		String sql = String.format(sqlFormat, dto.getEmpNo(),dto.getBirthDate(), dto.getFirstName(),
				dto.getLastName(),dto.getGender(),dto.getHireDate());
		
		conn = dbHelper.getConnection();
		try {
			pstmt = conn.prepareStatement(sql);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		
		
		
		
		
	}



}// end of class
