
Thread란?

process라는 용어를 이해
process : 프로그램이 실행되면 OS(운영체제)로 부터 메모리를 할당 받아서 프로세스 상태가 된다.
프로세스 안에는 하나의 작업의 단위인 여러 Thread를 가질 수 있다.
Thread : 하나의 프로세스 안에 실제 작업을 수행하는 단위이다.

Multi Threading : Thread가 여러개 있는 Thread
여러 thread가 수행되는 프로그래밍, 여러 작업이 동시에 실행되는 효과를 얻을 수 있다.
Thread는 각각의 자신만의 작업 공간을 가진다. (context 영역이라고도 한다.)

각 thread 사이에 공유하는 자원이 있을 수 있다.(코딩에 따라서)
여러 thread가 자원을 공유하는 작업이 수행되는 경우 서로 자원을 차지하려는
race.condition이 발생될 수 있다.--> 의도하지 않은 결과를 생성할 수 있다.
이렇게 여러 thread가 공유하는 자원중 경쟁이 발생하는 부분을 critical section 이라고 한다.
critical section을 다루기위해서 동기화 처리를 하는것이 바람직하다.
(동기화 처리는 일종의 순차적 수행을 말한다.)

동기화의 개념
여러 쓰레드를 생성해서 작업을 시켜보면 의도치않은 오류나 의도치않은 결과를 만난다.
이 의도치않은 결과를 막기위해서 알아야하는 추가적인 개념이 동기화

ex) 2개의 쓰레드가 같은 객체에 접근할 경우 즉, 동시에 접근 함으로써 오류가 발생할 수 있다.
동기화는 임계영역(동시에 접근해서 바꾸는 영역)안의 
공유자원을 Lock(잠궈서)해서 다른 thread의 접근을 제어한다.

int R = 0;

T1이 R변수에 접근해서 +2씩 증가시킨다.
R=2가 된 상황, T1은 10번을 반복해야된다. 작업이 끝나면 R은 20이된다.
이때 T2가 접근해서 -1을 한다.
근데 R=4까지 올렸는데 T2가와서 3으로 만들어 내는 이러한 상황을 막고자
배워야하는 개념이 동기화
동기화를 구현하는 방법
1. synchronized 메서드
T1의 실행이 끝날동안 R변수에 Lock을 거는 것이 동기화
T2는 기다리는중

2.synchronized  블럭